{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SERVICE_UUID","useStyles","makeStyles","theme","root","textAlign","marginTop","button","margin","spacing","connect","a","Bluetooth","isAvailable","console","log","options","filters","services","name","optionalServices","result","type","device","gatt","server","getPrimaryService","service","getCharacteristic","characteristic","Characteristic","Server","error","App","classes","React","useState","setServer","setCharacteristic","s_value","setValue","IsConnect","res","send","arrayBuffe","TextEncoder","encode","writeValue","value","className","Button","variant","color","onClick","noValidate","autoComplete","TextField","onChange","event","e_value","target","id","label","botton","connected","disconnect","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c74b5b87.chunk.js","sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport * as Bluetooth from 'react-bluetooth';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n// import FormControl from '@material-ui/core/FormControl';\n// import axios from 'axios';\n// import DeleteIcon from '@material-ui/icons/Delete';\nimport TextField from '@material-ui/core/TextField';\n\n\n\n// UUID\nconst SERVICE_UUID = \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\"; // UART service UUID\nconst CHARACTERISTIC_UUID_RX = \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\"; // 受信用\nconst CHARACTERISTIC_UUID_TX = \"6E400003-B5A3-F393-E0A9-E50E24DCCA9E\"; // 送信用（m5stickからの送信はないので使ってないはず）\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    textAlign: 'center',\n    marginTop: 60,\n    // '& > *': {\n    //   margin: theme.spacing(1),\n    // },\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\n// bluetooth connect\nconst connect = async () => {\n\n  //bluetooth通信ができる確認\n  const isAvailable = await Bluetooth.getAvailabilityAsync();\n  console.log(isAvailable);\n\n  if (!isAvailable) {\n    return;\n  }\n\n    // filter\n    const options = {\n      filters: [\n        { services: [SERVICE_UUID] },\n        { name: 'SMART KAIRO' },\n      ],\n      optionalServices: [SERVICE_UUID]\n    };\n\n    try{\n\n      const result = await Bluetooth.requestDeviceAsync(options);\n      if (result.type === 'cancel') {\n        console.log(result);\n        console.log(result.type);\n        return;\n      }\n\n      console.log(result.type);\n      const { device } = result;\n\n\n      if (device.gatt) {\n\n        const server = await device.gatt.connect();\n        console.log(`Bluetooth: Got server:`, server);\n        const service = await server.getPrimaryService(SERVICE_UUID);\n        console.log(`Bluetooth: Got service:`, service);\n        const characteristic = await service.getCharacteristic(CHARACTERISTIC_UUID_RX);\n        console.log(`Bluetooth: Got characteristic:`, characteristic);\n        return {Characteristic: characteristic, Server:server};\n\n      } else {\n      console.error(`Error: connected device did not have a GATT`);\n    }\n\n    } catch(message){\n      console.error(`error: ${message}`);\n    }\n\n}\n\nfunction App() {\n\n  const classes = useStyles();\n\n  const [server, setServer] = React.useState();\n  const [characteristic, setCharacteristic] = React.useState();\n\n\n  const [res, setRes] = React.useState();\n  const [s_value, setValue] = React.useState();\n\n  const IsConnect = async () => {\n    const res = await connect();\n    console.log(res.Characteristic);\n    console.log(res.Server);\n    setCharacteristic(res.Characteristic);\n    setServer(res.Server);\n  }\n\n  const send = async () => {\n    console.log(characteristic);\n    console.log(s_value);\n    var arrayBuffe = new TextEncoder().encode(s_value);\n\n    console.log(arrayBuffe);\n\n    const value = await characteristic.writeValue(arrayBuffe);\n    console.log(`Bluetooth: Got value:`, value);\n  }\n\n  const handleChangeCount = (event) => {\n    const e_value = event.target.value;\n    setValue(e_value);\n  };\n\n\n  const disconnects = () => {\n    console.log(server.connected)\n      if(!server || !server.connected) return;\n      server.disconnect();\n      alert(\"BLE接続を切断しました。\");\n\n  }\n\n  return (\n    <div className={classes.root}>\n      <div>\n        <Button variant=\"contained\" color=\"primary\" onClick={IsConnect}>\n          接続\n      </Button>\n      </div>\n      <div>\n        <form className={classes.button} noValidate autoComplete=\"off\">\n          <TextField\n            onChange={handleChangeCount}\n            id=\"outlined-secondary\"\n            label=\"value\"\n            variant=\"outlined\"\n            color=\"secondary\"\n          />\n        </form>\n      </div>\n      <div>\n        <Button className={classes.botton} variant=\"contained\" color=\"primary\" onClick={send} >\n          送信\n        </Button>\n      </div>\n      <div>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          className={classes.button}\n          // startIcon={<DeleteIcon />}\n          onClick={disconnects}\n        >\n          切断\n      </Button>\n      </div>\n      {/* <div className={classes.root}>\n        data : {res}\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}